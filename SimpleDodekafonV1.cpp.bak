/*
SimpleDodekafonV1.cpp
*/

#include <array>
#include <vector>

#define DODEKAFON_SIZE 12

class DodekafonRecord {
	std::array<int, DODEKAFON_SIZE> record{ 0 };
	std::array<int, DODEKAFON_SIZE> usedValue{ 0 };
	std::array<int, DODEKAFON_SIZE> usedDistance{ 0 };
	std::size_t length{};
	bool noMore{ false };

public:
	DodekafonRecord() {}
	bool IsThereNext() const;
	DodekafonRecord FindNext(std::size_t n = 0) const;
	bool IsNewValid(const std::vector<DodekafonRecord>& records);
	bool operator == (const DodekafonRecord& r2) const;
	std::size_t ValueNext(std::size_t n = 0) const;
};

std::size_t DodekafonRecord::ValueNext(std::size_t n) const
{
	for (std::size_t i = DODEKAFON_SIZE - 1; i >= 0; --i) {
		if (n == 0 || n > 0 && i < n - 1) {
			if (usedValue[i] == 0) {
				if (length > 0) {
					std::size_t vDistance = labs(i + 1 - this->record[length - 1]);
					if (vDistance < DODEKAFON_SIZE && usedDistance[vDistance] > 0)
						continue;
				}
				return i + 1;
			}
		}
	}
	return 0;
}

bool DodekafonRecord::IsThereNext() const
{
	return !noMore;
}

DodekafonRecord DodekafonRecord::FindNext(std::size_t n) const
{
	DodekafonRecord r = *this;
	std::size_t vNext = r.ValueNext(n);
	if (vNext > 0) {
		if (length > 0) {
			std::size_t vDistance = labs(vNext - this->record[length - 1]);
			r.usedDistance[vDistance - 1] = 1;
		}
		r.record[length] = vNext;
		r.usedValue[vNext - 1] = 1;
		++r.length;
	}
	else { // step back
		while (length > 0) {

			std::size_t nn = r.record[length - 1];
			r.usedValue[nn - 1] = 0;
			if (length > 1) {
				std::size_t vDistance = labs(nn - this->record[length - 2]);
				r.usedDistance[vDistance - 1] = 0;
			}
			--r.length;

			r = r.FindNext(nn);

		}
		if (length == 0) {
			r.noMore = true;
		}
	}
	return r;
}

bool DodekafonRecord::operator == (const DodekafonRecord& r2) const
{
	for (std::size_t i = 0; i < DODEKAFON_SIZE; ++i) {
		if (this->record[i] != r2.record[i])
			return false;
	}
	return true;
}

bool DodekafonRecord::IsNewValid(const std::vector<DodekafonRecord>& records)
{
	if (length == DODEKAFON_SIZE) {
		for (const DodekafonRecord& ri : records) {
			if (ri == *this)
				return false;
		}
		return true;
	}
	return false;
}

int SimpleDodekafonV1()
{
	DodekafonRecord start;
	std::vector<DodekafonRecord> result;

	for (DodekafonRecord r = start; r.IsThereNext (); r = r.FindNext()) {
		if (r.IsNewValid(result))
			result.push_back(r);
	}
	return result.size();
}
